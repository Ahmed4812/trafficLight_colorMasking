<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import CoreImage
import CoreImage.CIFilterBuiltins
import UIKit

//  public class Test{
//      
//  }

//  let image = UIImage(named: "yellow.jpg")!
func writeImage(_ image: UIImage, name: String, folder: String) {
    if name.isEmpty || name.count &lt; 3 {
        print("Name cannot be empty or less than 3 characters.")
        return
    }
    let documentsDirectory =  FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0].appendingPathComponent(folder)
    
    if !FileManager.default.fileExists(atPath: documentsDirectory.absoluteString) {
        try! FileManager.default.createDirectory(at: documentsDirectory, withIntermediateDirectories: true, attributes: nil)
    }
    
    let imagePath = documentsDirectory.appendingPathComponent(name)
    let imagedata = image.jpegData(compressionQuality: 1.0)
    do {
        try imagedata?.write(to: imagePath)
//          print("Image successfully written to path:\n\n \(documentsDirectory) \n\n")
    } catch {
        print("Error writing image: \(error)")
    }
}
//  writeImage(image, name: "fileTry\test5")


func test_light(light:String){
    let paths = Bundle.main.paths(forResourcesOfType: "jpg", inDirectory: light)
    var total=0
    var wrong_total=0
    var image_name = ""
    for img_path in paths{
        total += 1
        guard let image = UIImage(named: img_path) else { return }
        image_name = String(img_path.split(separator: "/").last!) 
        let predicted_light = predict(inputImage: image)
        if (predicted_light != light){
            wrong_total += 1
            writeImage(image, name: predicted_light+image_name, folder: "wrong"+light)
        }
    }
    print(light, total, wrong_total)
}



//  print(predict(inputImage: image))
//  let LIGHTS=["red","yellow","green"]

let LIGHTS=["yellow","green"]
func test(){
    for light in LIGHTS{
        test_light(light: light)
    }
}
//  test()


//  
//  let image = UIImage(named: "green.jpg")!
//  
//  public extension UIImage {
//      convenience init?(color: UIColor, size: CGSize = CGSize(width: 1, height: 1)) {
//          let rect = CGRect(origin: .zero, size: size)
//          UIGraphicsBeginImageContextWithOptions(rect.size, false, 0.0)
//          color.setFill()
//          UIRectFill(rect)
//          let image = UIGraphicsGetImageFromCurrentImageContext()
//          UIGraphicsEndImageContext()
//          
//          guard let cgImage = image?.cgImage else { return nil }
//          self.init(cgImage: cgImage)
//      }
//  }

//  let whiteImage = UIImage(color: .white, size: CGSize(width: 200, height: 200))
//  
//  writeImage(whiteImage!, name: "white.jpg", folder: "test")
//  let whitePic = UIImage(named: "white.jpg")!
let redPic = UIImage(named: "red.jpg")
//  let filter = CustomFilters()
//  let filteredImg = filter.red_mask(inputImage: redPic!) 
//  let resizedPic = redPic!.resizeImage(newWidth: 5)
////  print(predict(inputImage: whitePic))
//  print(get_color(image: resizedPic))
//  
print(predict(inputImage: redPic!))
</string>
			<key>ModifiedRange</key>
			<string>{1, 3028}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>

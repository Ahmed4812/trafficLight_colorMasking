<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import CoreImage
import CoreImage.CIFilterBuiltins
import UIKit

extension UIImage {
    var averageColor: [CGFloat]? {
        guard let inputImage = self.ciImage else { return nil }
        let extentVector = CIVector(x: inputImage.extent.origin.x, y: inputImage.extent.origin.y, z: inputImage.extent.size.width, w: inputImage.extent.size.height)
        
        guard let filter = CIFilter(name: "CIAreaAverage", parameters: [kCIInputImageKey: inputImage, kCIInputExtentKey: extentVector]) else { return nil }
        guard let outputImage = filter.outputImage else { return nil }
        
        var bitmap = [UInt8](repeating: 0, count: 4)
        let context = CIContext(options: [.workingColorSpace: kCFNull])
        context.render(outputImage, toBitmap: &amp;bitmap, rowBytes: 4, bounds: CGRect(x: 0, y: 0, width: 1, height: 1), format: .RGBA8, colorSpace: nil)
        
        return [CGFloat(bitmap[0]) / 255, CGFloat(bitmap[1]) / 255, CGFloat(bitmap[2]) / 255, CGFloat(bitmap[3]) / 255]
    }
}
func predict(inputImage:UIImage)-&gt;String {
    let filter = CustomFilters()
    let rOut = filter.red_mask(inputImage: inputImage)
    let yOut = filter.yellow_mask(inputImage: inputImage)
    let gOut = filter.green_mask(inputImage: inputImage)
//      struct rygAvg{
//          let color: String
//          let avg: CGFloat
//      }
//      var colorList = [
//          rygAvg(color:"red",avg:rOut.averageColor![0]),
//          rygAvg(color: "yellow", avg: yOut.averageColor![0]),
//          rygAvg(color:"green",avg:gOut.averageColor![0])
//      ]
    var rygList=["red":rOut.averageColor![0], "yellow":yOut.averageColor![0], "green":gOut.averageColor![0]
    ]
    let maxColor = rygList.max { a, b in a.value &lt; b.value }
    
    return maxColor!.key
}
let image = UIImage(named: "yellow.jpg")!

print(predict(inputImage: image))

</string>
			<key>ModifiedRange</key>
			<string>{1, 1849}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
